<footer class="footer">
	<div class="footer-inner">
		{{#link "help_center"}}{{help_center.name}}{{/link}}

		<div class="footer-language-selector">
			{{#if alternative_locales}}
			<div class="dropdown language-selector">
				<button class="dropdown-toggle" aria-haspopup="true">
					{{current_locale.name}}
					<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" focusable="false" viewBox="0 0 12 12"
						class="dropdown-chevron-icon">
						<path fill="none" stroke="currentColor" stroke-linecap="round"
							d="M3 4.5l2.6 2.6c.2.2.5.2.7 0L9 4.5" />
					</svg>
				</button>
				<span class="dropdown-menu dropdown-menu-end" role="menu">
					{{#each alternative_locales}}
					<a href="{{url}}" dir="{{direction}}" rel="nofollow" role="menuitem">
						{{name}}
					</a>
					{{/each}}
				</span>
			</div>
			{{/if}}
		</div>
	</div>
	<script>
		function formatDate(dateString) { // Parse the date string const utcDate = new Date(dateString); // Calculate the offset for the Korea time zone (UTC+9) const koreaOffset = 9 * 60 * 60 * 1000;
			// Adjust the date by adding the offset const koreanDate = new Date(utcDate.getTime() + koreaOffset); // Format the date as you desire const formattedDate =
			`${koreanDate.getFullYear()}-${(koreanDate.getMonth() + 1).toString().padStart(2, '0')}-${koreanDate.getDate().toString().padStart(2, '0')}`; return formattedDate;
		} const timeStamps =
			document.querySelectorAll('.timestamp'); timeStamps.forEach((node) => {
				const dateString = node.innerText.trim(); node.innerText = formatDate(dateString); console.log(formatDate(dateString))
			})
	</script>
	<script>
		!function (o, d, s, e, f) {
			var i, a, p, c = [], h = []; function t() {
				var t = "You must provide a supported major version."; try {
					if (!f) throw new Error(t); var e, n =
						"https://cdn.smooch.io/", r = "smooch"; e = "string" == typeof this.response ? JSON.parse(this.response) : this.response; var o = f.match(/([0-9]+)\.?([0-9]+)?\.?([0-9]+)?/), s = o && o[1], i
							= o && o[2], a = o && o[3], p = e["v" + s], c = e["v" + s + "." + i + ".patch"]; if (e.url || p || c) {
								var h = d.getElementsByTagName("script")[0], u = d.createElement("script"); if (u.async
									= !0, a) u.src = c || n + r + "." + f + ".min.js"; else { if (!(5 <= s && p)) throw new Error(t); u.src = p } h.parentNode.insertBefore(u, h)
							}
				} catch (e) {
					e.message === t &&
						console.error(e)
				}
			} o[s] = {
				init: function () {
					i = arguments; var t = {
						then: function (e) { return h.push({ type: "t", next: e }), t }, catch: function (e) {
							return h.push({
								type: "c",
								next: e
							}), t
						}
					}; return t
				}, on: function () { c.push(arguments) }, render: function () { a = arguments }, destroy: function () { p = arguments }
			}, o.__onWebMessengerHostReady__ = function
				(e) {
				if (delete o.__onWebMessengerHostReady__, o[s] = e, i) for (var t = e.init.apply(e, i), n = 0; n < h.length; n++) { var r = h[n]; t = "t" === r.type ? t.then(r.next) : t.catch(r.next) }
				a && e.render.apply(e, a), p && e.destroy.apply(e, p); for (n = 0; n < c.length; n++)e.on.apply(e, c[n])
			}; var n = new XMLHttpRequest; n.addEventListener("load", t), n.open("GET", "https://"
				+ e + ".webloader.smooch.io/", !0), n.responseType = "json", n.send()
		}(window, document, "Smooch", "63e1a774e30b38011a2a5e22", "5");
	</script>

	<script>
		var skPromise = Smooch.init({
			integrationId: '63e1a774e30b38011a2a5e22'
			,
			displayName: '이지봇',
			customColors: {
				brandColor: '65758e',
				conversationColor: '65758e',
				actionColor: '65758e',
			},

			menuItems: {
				imageUpload: true,
				fileUpload: true,
				shareLocation: true,
			},
			prechatCapture: {
				avatarUrl: 'https://static.zdassets.com/web_widget/latest/default_avatar.png',
				enabled: true,
				enableEmailLinking: true,
				fields: [
					{
						type: 'select',
						name: '파트너 유형',
						label: '파트너 유형',
						placeholder: '선택해주세요',
						options: [
							{
								name: '입점 파트너',
								label: '입점 파트너',
							},
							{
								name: '예비 파트너',
								label: '예비 파트너',
							},
						],
					},
					{
						type: 'email',
						name: '이메일',
						label: '이메일',
						placeholder: 'your@email.com',
					},
				],
			},

			customText: {
				connectNotificationText: 'Sync your conversation and continue messaging us through your favorite app.',
				connectNotificationSingleText: 'Be notified when you get a reply.',
				conversationListHeaderText: 'My conversations',
				conversationListPreviewAnonymousText: 'Someone',
				conversationListPreviewCarouselText: '{user} sent a message',
				conversationListPreviewFileText: '{user} sent a file',
				conversationListPreviewFormText: '{user} sent a form',
				conversationListPreviewFormResponseText: '{user} filled a form',
				conversationListPreviewImageText: '{user} sent an image',
				conversationListPreviewLocationRequestText: '{user} sent a location request',
				conversationListPreviewUserText: 'You',
				conversationListRelativeTimeJustNow: 'Just now',
				conversationListRelativeTimeMinute: '1 minute ago',
				conversationListRelativeTimeMinutes: '{value} minutes ago',
				conversationListRelativeTimeHour: '1 hour ago',
				conversationListRelativeTimeHours: '{value} hours ago',
				conversationListRelativeTimeYesterday: 'Yesterday',
				conversationListTimestampFormat: 'MM/DD/YY',
				conversationTimestampHeaderFormat: 'MMMM D YYYY, h:mm A',
				couldNotConnect: 'Offline. You will not receive messages.',
				couldNotConnectRetry: 'Reconnecting...',
				couldNotConnectRetrySuccess: "You're back online!",
				couldNotLoadConversations: 'Couldn’t load conversations.',
				emailChangeAddress: 'Change my email',
				emailDescription: 'To be notified by email when you get a reply, enter your email address.',
				emailFieldLabel: 'Email',
				emailFieldPlaceholder: 'Your email address',
				emailFormButton: 'Submit',
				emailLinkingErrorMessage: 'Please submit a valid email address.',
				fetchHistory: 'Load more',
				fetchingHistory: 'Retrieving history...',
				fileTooLargeError: 'Max file size limit exceeded ({size})',
				fileTypeError: 'Unsupported file type.',
				formErrorEntryRequired: 'This entry is required',
				formErrorInvalidEmail: 'Email is invalid',
				formErrorNoLongerThan: 'Must contain no more than ({characters}) characters',
				formErrorNoShorterThan: 'Must contain at least ({characters}) characters',
				formErrorUnknown: "This doesn't look quite right",
				formFieldSelectPlaceholderFallback: 'Choose one...',
				frontendEmailChannelDescription:
					"To talk to us using email just send a message to our email address and we'll reply shortly:",
				headerText: 'How can we help?',
				imageClickToReload: 'Click to reload image.',
				imageClickToView: 'Click to view {size} image.',
				imagePreviewNotAvailable: 'Preview not available.',
				inputPlaceholder: '메시지를 입력해주세요',
				inputPlaceholderBlocked: 'Complete the form above...',
				introAppText: 'Message us below or from your favorite app.',
				lineChannelDescription: 'To talk to us using LINE, scan this QR code using the LINE app and send us a message.',
				linkError: 'An error occurred when attempting to generate a link for this channel. Please try again.',
				linkChannelPageHeader: 'Sync your conversation',
				locationNotSupported:
					'Your browser does not support location services or it’s been disabled. Please type your location instead.',
				locationSecurityRestriction: 'This website cannot access your location. Please type your location instead.',
				locationSendingFailed: 'Could not send location',
				locationServicesDenied:
					'This website cannot access your location. Allow access in your settings or type your location instead.',
				messageIndicatorTitlePlural: '({count}) New messages',
				messageIndicatorTitleSingular: '({count}) New message',
				messageRelativeTimeDay: '{value}d ago',
				messageRelativeTimeHour: '{value}h ago',
				messageRelativeTimeJustNow: 'Just now',
				messageRelativeTimeMinute: '{value}m ago',
				messageTimestampFormat: 'h:mm A',
				messageDelivered: 'Delivered',
				messageSeen: 'Seen',
				messageSending: 'Sending...',
				messengerChannelDescription:
					'Connect your Facebook Messenger account to be notified when you get a reply and continue the conversation on Facebook Messenger.',
				newConversationButtonText: '새로운 대화',
				notificationSettingsChannelsDescription:
					'Sync this conversation by connecting to your favorite messaging app to continue the conversation your way.',
				notificationSettingsChannelsTitle: 'Other Channels',
				notificationSettingsConnected: 'Connected',
				notificationSettingsConnectedAs: 'Connected as {username}',
				prechatCaptureGreetingText: "안녕하세요. 저는 이지컴아이앤씨 챗봇입니다.성심껏 도와 드리겠습니다😀️",
				prechatCaptureNameLabel: 'Your name',
				prechatCaptureNamePlaceholder: 'Type your name...',
				prechatCaptureEmailLabel: 'Email',
				prechatCaptureEmailPlaceholder: 'name@company.com',
				prechatCaptureConfirmationText: '자세한 내용을 알려주시겠어요?',
				prechatCaptureMailgunLinkingConfirmation: "You'll be notified here and by email at {email} once we reply.",
				sendButtonText: '전송',
			},
		}).then(() => {

		})

	</script>
</footer>